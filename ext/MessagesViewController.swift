//
//  MessagesViewController.swift
//  iOWOer MessagesExtension
//
//  Created by Joe Oliveira on 7/5/19.
//  Copyright Â© 2019 Alternative Apps Unlimited. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, UITextFieldDelegate {
    let o = owo()
    @IBOutlet weak var ZalgoSlider: UISlider!
    @IBOutlet weak var FontSwitch: UISegmentedControl!
    @IBOutlet weak var StyleSwitch: UISegmentedControl!
    @IBOutlet weak var Optiosn: UISegmentedControl!
    @IBOutlet weak var TextBox: UITextField!
    let group = UserDefaults.init(suiteName: "group.OWO")
    
    @IBOutlet weak var purchaseLabel: UILabel!
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.

        runChecks()
        TextBox.layer.borderWidth = 1
        TextBox.layer.borderColor = UIColor.purple.cgColor //UIColor.systemPink.cgColor
        self.TextBox.delegate = self
    }
    
    // MARK: - Conversation Handling
    let defaults = UserDefaults.standard
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        runChecks()
        // Use this method to configure the extension and restore previously stored state.
    }
    @IBOutlet weak var ConvertBUtt: UIButton!
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.view.endEditing(true)
        return false
    }
    
    func runChecks(){
        NSLog("Unlocked? \(group?.bool(forKey: "Ad_Removal") ?? false)")
        if(!(group?.bool(forKey: "Unlocked") ?? false)){
            ConvertBUtt.isEnabled = false
            TextBox.isEnabled = false
            purchaseLabel.text = "In order to use the iMessage extension you must purchase the ad removal in the main application"
            TextBox.placeholder = "iMessage extension is locked"
        }else{
            ConvertBUtt.isEnabled = true
            TextBox.isEnabled = true
            purchaseLabel.text = "To change the settings please go to the main app!"
            TextBox.placeholder = "Tap here to get started"
        }
        
        TextBox.autocorrectionType = (group?.bool(forKey: "spellCheck") ?? false) ? .yes : .no
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        runChecks()
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.

        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        if(self.presentationStyle == .expanded && group?.bool(forKey: "Unlocked") ?? false){
            TextBox.becomeFirstResponder()
            TextBox.placeholder = "Enter text here"
        }else{
            TextBox.resignFirstResponder()
            TextBox.placeholder = "Tap here to get started"
        }
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
    @IBAction func fontChange(_ sender: Any) {
        ZalgoSlider.isEnabled = (FontSwitch.selectedSegmentIndex == 2)
        //zalgoLabel.isEnabled  = (FontSwitch.selectedSegmentIndex == 2)
        StyleSwitch.isEnabled  = (FontSwitch.selectedSegmentIndex == 1)
    }
    
    @IBOutlet weak var zalgoLabel: UILabel!
    @IBAction func Convert(_ sender: Any) {
        ConvertedString = ""
        switch Optiosn.selectedSegmentIndex{
        case 1:
            ConvertedString = o.SpongeBoB(TextBox.text ?? "")
        case 2:
            ConvertedString = o.Clap(TextBox.text ?? "")
        case 3:
            ConvertedString = o.OWO(TextBox.text ?? "", o.uwu)
        case 4:
            ConvertedString = o.yeMold(TextBox.text ?? "")
        default:
            ConvertedString = TextBox.text ?? ""
        }
        NSLog("Type Change: \(ConvertedString)")
        switch FontSwitch.selectedSegmentIndex{
        case 1:
            fontChanger()
        case 2:
            ConvertedString = o.doZalgo(ConvertedString, Int(ZalgoSlider.value))
        default:
            break
        }
        NSLog("Font Change: \(ConvertedString)")

        send(ConvertedString)
        requestPresentationStyle(.compact)
        activeConversation?.accessibilityScroll(.down)
    }
    
    @IBAction func touchTextBox(_ sender: Any) {
        requestPresentationStyle(.expanded)
    }
    
    func send(_ Text: String){
        if(group?.bool(forKey: "delaySend") ?? false){
            activeConversation?.insertText(Text, completionHandler: nil)
        }else{
            if #available(iOSApplicationExtension 11.0, *) {
                activeConversation?.sendText(Text, completionHandler: nil)
            } else {
                activeConversation?.insertText(Text, completionHandler: nil)
            }
        }
        
        if(group?.bool(forKey: "clearText") ?? false){
            TextBox.text = ""
        }
        
        TextBox.resignFirstResponder()
    }
    
    func fontChanger(){
        switch StyleSwitch.selectedSegmentIndex{
        case 0:
            ConvertedString = o.OWO(TextBox.text ?? "", o.fancy)
        case 1:
            TextBox.text = o.OWO_Alt(String(TextBox.text ?? ""), o.upsideDown)
            ConvertedString = String((TextBox.text ?? "").reversed())
        case 2:
           ConvertedString = o.OWO(String(TextBox.text ?? ""), o.Fraktur)
        case 3:
            ConvertedString = o.OWO((TextBox.text ?? "").uppercased(), o.bubbles)
        default:
            break
        }
    }
    var ConvertedString: String = ""
}

extension UITextField{
    @IBInspectable var doneAccessory: Bool{
        get{
            return self.doneAccessory
        }
        set (hasDone) {
            if hasDone{
                addDoneButtonOnKeyboard()
            }
        }
    }
    
    func addDoneButtonOnKeyboard()
    {
        let doneToolbar: UIToolbar = UIToolbar(frame: CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 50))
        doneToolbar.barStyle = .default
        
        let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        let done: UIBarButtonItem = UIBarButtonItem(title: "Done", style: .done, target: self, action: #selector(self.doneButtonAction))
        
        let items = [flexSpace, done]
        doneToolbar.items = items
        doneToolbar.sizeToFit()
        
        self.inputAccessoryView = doneToolbar
    }
    
    @IBAction func doneButtonAction()
    {
        self.resignFirstResponder()
    }
}
